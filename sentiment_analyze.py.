import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SpatialDropout1D, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.preprocessing import LabelEncoder

class SentimentAnalyzer:
    def __init__(self, max_words=10000, max_sequence_length=100):
        self.max_words = max_words
        self.max_sequence_length = max_sequence_length
        self.tokenizer = Tokenizer(num_words=self.max_words)
        self.model = self._build_model()
        self.label_encoder = LabelEncoder()

    def _build_model(self):
        model = Sequential([
            Embedding(self.max_words, 128, input_length=self.max_sequence_length),
            SpatialDropout1D(0.2),
            LSTM(100, dropout=0.2, recurrent_dropout=0.2),
            Dense(1, activation='sigmoid')
        ])
        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
        return model

    def fit(self, texts, labels, epochs=5, batch_size=64, validation_split=0.2):
        # Tokenize and pad sequences
        self.tokenizer.fit_on_texts(texts)
        sequences = self.tokenizer.texts_to_sequences(texts)
        padded_sequences = pad_sequences(sequences, maxlen=self.max_sequence_length)

        # Encode labels
        encoded_labels = self.label_encoder.fit_transform(labels)

        # Train the model
        history = self.model.fit(
            padded_sequences,
            encoded_labels,
            epochs=epochs,
            batch_size=batch_size,
            validation_split=validation_split,
            verbose=1
        )
        return history

    def predict_sentiment(self, reviews):
        sequences = self.tokenizer.texts_to_sequences(reviews)
        padded = pad_sequences(sequences, maxlen=self.max_sequence_length)
        predictions = self.model.predict(padded)
        # Transform binary predictions to labels
        pred_labels = [1 if p >= 0.5 else 0 for p in predictions]
        return pred_labels

def load_data(file_path):
    # Load CSV data
    data = pd.read_csv(file_path)
    texts = data['text'].values  # Replace 'text' with the column name for text data
    labels = data['label'].values  # Replace 'label' with the column name for sentiment labels
    return texts, labels

if __name__ == "__main__":
    # Load the data
    texts, labels = load_data('/content/Test.csv')
    
    # Create and train SentimentAnalyzer instance
    analyzer = SentimentAnalyzer()
    print("Training the model...")
    analyzer.fit(texts, labels, epochs=3)
    
    # Test with new reviews
    new_reviews = [
        "The movie was fantastic and I loved it!",
        "It was the worst film I have ever seen."
    ]
    
    # Make predictions
    predicted_labels = analyzer.predict_sentiment(new_reviews)
    
    # Print results
    for review, label in zip(new_reviews, predicted_labels):
        sentiment = "Positive" if label == 1 else "Negative"
        print(f"Review: {review} | Predicted Sentiment: {sentiment}")


